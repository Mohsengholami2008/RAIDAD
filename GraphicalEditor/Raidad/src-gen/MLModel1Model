import numpy as np
import warnings
np.warnings = warnings
import pandas as pd
from sklearn.metrics import confusion_matrix, precision_recall_curve, roc_curve, auc
from sklearn.model_selection import cross_validate, StratifiedKFold
from sklearn.neighbors import KNeighborsClassifier


def read_csv(file_path):
    data = pd.read_csv(file_path, )
    return data
















def build_KNN(KNN_params):
    KNN_model = KNeighborsClassifier(n_neighbors=KNN_params['k'])
    return KNN_model







def perform_cross_validation(X, y, classifier, cv_folds, scoring_metrics):
    cv_results = cross_validate(classifier, X, y, cv=cv_folds, scoring=list(scoring_metrics.keys()), return_train_score=False)
    mean_scores = {metric: np.mean(cv_results[f'test_{metric}']) for metric in scoring_metrics}
    std_scores = {metric: np.std(cv_results[f'test_{metric}']) for metric in scoring_metrics}
    for metric_name in scoring_metrics:
        metric_scores = cv_results[f'test_{metric_name}']
        print(f'{metric_name}: {metric_scores}')
        print(f'Mean {metric_name}: {np.mean(metric_scores):.3f}, Standard Deviation: {np.std(metric_scores):.3f}')




    return cv_results












def process_data(data=None,target_column=None, KNN_params=None, cv_folds=None): 
	executed_functions = []
	model = None	

	a =['KNN','Cross_Validation','invalid']

	for letter in range (len(a)):

















		if a[letter] == 'KNN':
			y = data[target_column]
			X = data.drop(columns=[target_column])	
     

			KNN_model = build_KNN(KNN_params)
			executed_functions.append('train_KNN')

		if a[letter] == 'Cross_Validation':       

			cv_results = perform_cross_validation(X, y, KNN_model, cv_folds, scoring_metrics)                      
			executed_functions.append('perform_cross_validation')


















	return data, executed_functions, model

if __name__ == "__main__":
    file_path = 'C:\Users\ShemrounShop\Desktop\datasets\IRIS\Iris.csv'
    data = read_csv(file_path)
    data = data.drop(columns=['Id'])






















    KNN_params = {
        'k': 4
            }
























    cv_folds = 5
    scoring_metrics = {
        'f1_macro': 'F1 Macro'
    }

    processed_data, executed_functions, model = process_data(


        data=data,

 
        target_column='Species',
















 






		cv_folds=cv_folds,










 


        KNN_params=KNN_params,














		
		


    )



