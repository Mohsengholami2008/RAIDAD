/**
 */
package mLmodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import mLmodel.util.MLmodelAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MLmodelItemProviderAdapterFactory extends MLmodelAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MLmodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Root} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RootItemProvider rootItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Root}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRootAdapter() {
		if (rootItemProvider == null) {
			rootItemProvider = new RootItemProvider(this);
		}

		return rootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Process} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessItemProvider processItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Process}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessAdapter() {
		if (processItemProvider == null) {
			processItemProvider = new ProcessItemProvider(this);
		}

		return processItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.CSV} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CSVItemProvider csvItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.CSV}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCSVAdapter() {
		if (csvItemProvider == null) {
			csvItemProvider = new CSVItemProvider(this);
		}

		return csvItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Sep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SepItemProvider sepItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Sep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSepAdapter() {
		if (sepItemProvider == null) {
			sepItemProvider = new SepItemProvider(this);
		}

		return sepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Nrows} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NrowsItemProvider nrowsItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Nrows}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNrowsAdapter() {
		if (nrowsItemProvider == null) {
			nrowsItemProvider = new NrowsItemProvider(this);
		}

		return nrowsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.ID} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IDItemProvider idItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.ID}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIDAdapter() {
		if (idItemProvider == null) {
			idItemProvider = new IDItemProvider(this);
		}

		return idItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Target} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetItemProvider targetItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Target}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetAdapter() {
		if (targetItemProvider == null) {
			targetItemProvider = new TargetItemProvider(this);
		}

		return targetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Regular} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegularItemProvider regularItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Regular}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegularAdapter() {
		if (regularItemProvider == null) {
			regularItemProvider = new RegularItemProvider(this);
		}

		return regularItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Excel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExcelItemProvider excelItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Excel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExcelAdapter() {
		if (excelItemProvider == null) {
			excelItemProvider = new ExcelItemProvider(this);
		}

		return excelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Header_Ex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Header_ExItemProvider header_ExItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Header_Ex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeader_ExAdapter() {
		if (header_ExItemProvider == null) {
			header_ExItemProvider = new Header_ExItemProvider(this);
		}

		return header_ExItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Simple_Imputer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Simple_ImputerItemProvider simple_ImputerItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Simple_Imputer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimple_ImputerAdapter() {
		if (simple_ImputerItemProvider == null) {
			simple_ImputerItemProvider = new Simple_ImputerItemProvider(this);
		}

		return simple_ImputerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Missing_Values} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Missing_ValuesItemProvider missing_ValuesItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Missing_Values}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMissing_ValuesAdapter() {
		if (missing_ValuesItemProvider == null) {
			missing_ValuesItemProvider = new Missing_ValuesItemProvider(this);
		}

		return missing_ValuesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Strategy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StrategyItemProvider strategyItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Strategy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStrategyAdapter() {
		if (strategyItemProvider == null) {
			strategyItemProvider = new StrategyItemProvider(this);
		}

		return strategyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Fill_Value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Fill_ValueItemProvider fill_ValueItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Fill_Value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFill_ValueAdapter() {
		if (fill_ValueItemProvider == null) {
			fill_ValueItemProvider = new Fill_ValueItemProvider(this);
		}

		return fill_ValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.KNN_Imputer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KNN_ImputerItemProvider knN_ImputerItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.KNN_Imputer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKNN_ImputerAdapter() {
		if (knN_ImputerItemProvider == null) {
			knN_ImputerItemProvider = new KNN_ImputerItemProvider(this);
		}

		return knN_ImputerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.N_Neighbors} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected N_NeighborsItemProvider n_NeighborsItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.N_Neighbors}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createN_NeighborsAdapter() {
		if (n_NeighborsItemProvider == null) {
			n_NeighborsItemProvider = new N_NeighborsItemProvider(this);
		}

		return n_NeighborsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Metric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricItemProvider metricItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Metric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricAdapter() {
		if (metricItemProvider == null) {
			metricItemProvider = new MetricItemProvider(this);
		}

		return metricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Weights} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeightsItemProvider weightsItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Weights}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeightsAdapter() {
		if (weightsItemProvider == null) {
			weightsItemProvider = new WeightsItemProvider(this);
		}

		return weightsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.KNN} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KNNItemProvider knnItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.KNN}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKNNAdapter() {
		if (knnItemProvider == null) {
			knnItemProvider = new KNNItemProvider(this);
		}

		return knnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Cross_Validation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Cross_ValidationItemProvider cross_ValidationItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Cross_Validation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCross_ValidationAdapter() {
		if (cross_ValidationItemProvider == null) {
			cross_ValidationItemProvider = new Cross_ValidationItemProvider(this);
		}

		return cross_ValidationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.HeadCSV} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeadCSVItemProvider headCSVItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.HeadCSV}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeadCSVAdapter() {
		if (headCSVItemProvider == null) {
			headCSVItemProvider = new HeadCSVItemProvider(this);
		}

		return headCSVItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Sheet_Na_Excel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Sheet_Na_ExcelItemProvider sheet_Na_ExcelItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Sheet_Na_Excel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSheet_Na_ExcelAdapter() {
		if (sheet_Na_ExcelItemProvider == null) {
			sheet_Na_ExcelItemProvider = new Sheet_Na_ExcelItemProvider(this);
		}

		return sheet_Na_ExcelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Robust_Scaling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Robust_ScalingItemProvider robust_ScalingItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Robust_Scaling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRobust_ScalingAdapter() {
		if (robust_ScalingItemProvider == null) {
			robust_ScalingItemProvider = new Robust_ScalingItemProvider(this);
		}

		return robust_ScalingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Standardization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardizationItemProvider standardizationItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Standardization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardizationAdapter() {
		if (standardizationItemProvider == null) {
			standardizationItemProvider = new StandardizationItemProvider(this);
		}

		return standardizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Normalization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalizationItemProvider normalizationItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Normalization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalizationAdapter() {
		if (normalizationItemProvider == null) {
			normalizationItemProvider = new NormalizationItemProvider(this);
		}

		return normalizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.OneHot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OneHotItemProvider oneHotItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.OneHot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOneHotAdapter() {
		if (oneHotItemProvider == null) {
			oneHotItemProvider = new OneHotItemProvider(this);
		}

		return oneHotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Drop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropItemProvider dropItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Drop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropAdapter() {
		if (dropItemProvider == null) {
			dropItemProvider = new DropItemProvider(this);
		}

		return dropItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Categories} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoriesItemProvider categoriesItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Categories}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoriesAdapter() {
		if (categoriesItemProvider == null) {
			categoriesItemProvider = new CategoriesItemProvider(this);
		}

		return categoriesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Sparse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SparseItemProvider sparseItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Sparse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSparseAdapter() {
		if (sparseItemProvider == null) {
			sparseItemProvider = new SparseItemProvider(this);
		}

		return sparseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Handle_Unk} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Handle_UnkItemProvider handle_UnkItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Handle_Unk}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHandle_UnkAdapter() {
		if (handle_UnkItemProvider == null) {
			handle_UnkItemProvider = new Handle_UnkItemProvider(this);
		}

		return handle_UnkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Duplicates} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DuplicatesItemProvider duplicatesItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Duplicates}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDuplicatesAdapter() {
		if (duplicatesItemProvider == null) {
			duplicatesItemProvider = new DuplicatesItemProvider(this);
		}

		return duplicatesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Keep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeepItemProvider keepItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Keep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeepAdapter() {
		if (keepItemProvider == null) {
			keepItemProvider = new KeepItemProvider(this);
		}

		return keepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Date_to_Int} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Date_to_IntItemProvider date_to_IntItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Date_to_Int}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDate_to_IntAdapter() {
		if (date_to_IntItemProvider == null) {
			date_to_IntItemProvider = new Date_to_IntItemProvider(this);
		}

		return date_to_IntItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Year} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected YearItemProvider yearItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Year}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createYearAdapter() {
		if (yearItemProvider == null) {
			yearItemProvider = new YearItemProvider(this);
		}

		return yearItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Month} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MonthItemProvider monthItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Month}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMonthAdapter() {
		if (monthItemProvider == null) {
			monthItemProvider = new MonthItemProvider(this);
		}

		return monthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Day} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DayItemProvider dayItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Day}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDayAdapter() {
		if (dayItemProvider == null) {
			dayItemProvider = new DayItemProvider(this);
		}

		return dayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.PCA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCAItemProvider pcaItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.PCA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCAAdapter() {
		if (pcaItemProvider == null) {
			pcaItemProvider = new PCAItemProvider(this);
		}

		return pcaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Varience} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarienceItemProvider varienceItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Varience}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarienceAdapter() {
		if (varienceItemProvider == null) {
			varienceItemProvider = new VarienceItemProvider(this);
		}

		return varienceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.SVM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SVMItemProvider svmItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.SVM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSVMAdapter() {
		if (svmItemProvider == null) {
			svmItemProvider = new SVMItemProvider(this);
		}

		return svmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.MLP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MLPItemProvider mlpItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.MLP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMLPAdapter() {
		if (mlpItemProvider == null) {
			mlpItemProvider = new MLPItemProvider(this);
		}

		return mlpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Hidden_Layer_Sizes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hidden_Layer_SizesItemProvider hidden_Layer_SizesItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Hidden_Layer_Sizes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHidden_Layer_SizesAdapter() {
		if (hidden_Layer_SizesItemProvider == null) {
			hidden_Layer_SizesItemProvider = new Hidden_Layer_SizesItemProvider(this);
		}

		return hidden_Layer_SizesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Voting_Classifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Voting_ClassifierItemProvider voting_ClassifierItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Voting_Classifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVoting_ClassifierAdapter() {
		if (voting_ClassifierItemProvider == null) {
			voting_ClassifierItemProvider = new Voting_ClassifierItemProvider(this);
		}

		return voting_ClassifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Random_Forest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Random_ForestItemProvider random_ForestItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Random_Forest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRandom_ForestAdapter() {
		if (random_ForestItemProvider == null) {
			random_ForestItemProvider = new Random_ForestItemProvider(this);
		}

		return random_ForestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.K_Medians} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected K_MediansItemProvider k_MediansItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.K_Medians}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createK_MediansAdapter() {
		if (k_MediansItemProvider == null) {
			k_MediansItemProvider = new K_MediansItemProvider(this);
		}

		return k_MediansItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.K_Means} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected K_MeansItemProvider k_MeansItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.K_Means}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createK_MeansAdapter() {
		if (k_MeansItemProvider == null) {
			k_MeansItemProvider = new K_MeansItemProvider(this);
		}

		return k_MeansItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Logistic_Regression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Logistic_RegressionItemProvider logistic_RegressionItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Logistic_Regression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogistic_RegressionAdapter() {
		if (logistic_RegressionItemProvider == null) {
			logistic_RegressionItemProvider = new Logistic_RegressionItemProvider(this);
		}

		return logistic_RegressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.N_Estimators_RF} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected N_Estimators_RFItemProvider n_Estimators_RFItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.N_Estimators_RF}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createN_Estimators_RFAdapter() {
		if (n_Estimators_RFItemProvider == null) {
			n_Estimators_RFItemProvider = new N_Estimators_RFItemProvider(this);
		}

		return n_Estimators_RFItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Criterion_RF} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Criterion_RFItemProvider criterion_RFItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Criterion_RF}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCriterion_RFAdapter() {
		if (criterion_RFItemProvider == null) {
			criterion_RFItemProvider = new Criterion_RFItemProvider(this);
		}

		return criterion_RFItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Random_State_RF} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Random_State_RFItemProvider random_State_RFItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Random_State_RF}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRandom_State_RFAdapter() {
		if (random_State_RFItemProvider == null) {
			random_State_RFItemProvider = new Random_State_RFItemProvider(this);
		}

		return random_State_RFItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.DBSCAN} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DBSCANItemProvider dbscanItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.DBSCAN}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDBSCANAdapter() {
		if (dbscanItemProvider == null) {
			dbscanItemProvider = new DBSCANItemProvider(this);
		}

		return dbscanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Max_Iter_MLP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Max_Iter_MLPItemProvider max_Iter_MLPItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Max_Iter_MLP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMax_Iter_MLPAdapter() {
		if (max_Iter_MLPItemProvider == null) {
			max_Iter_MLPItemProvider = new Max_Iter_MLPItemProvider(this);
		}

		return max_Iter_MLPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Random_State_MLP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Random_State_MLPItemProvider random_State_MLPItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Random_State_MLP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRandom_State_MLPAdapter() {
		if (random_State_MLPItemProvider == null) {
			random_State_MLPItemProvider = new Random_State_MLPItemProvider(this);
		}

		return random_State_MLPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Activation_MLP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Activation_MLPItemProvider activation_MLPItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Activation_MLP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivation_MLPAdapter() {
		if (activation_MLPItemProvider == null) {
			activation_MLPItemProvider = new Activation_MLPItemProvider(this);
		}

		return activation_MLPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Alpha_MLP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Alpha_MLPItemProvider alpha_MLPItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Alpha_MLP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlpha_MLPAdapter() {
		if (alpha_MLPItemProvider == null) {
			alpha_MLPItemProvider = new Alpha_MLPItemProvider(this);
		}

		return alpha_MLPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Scatter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScatterItemProvider scatterItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Scatter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScatterAdapter() {
		if (scatterItemProvider == null) {
			scatterItemProvider = new ScatterItemProvider(this);
		}

		return scatterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Cluster_Evaluation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Cluster_EvaluationItemProvider cluster_EvaluationItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Cluster_Evaluation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCluster_EvaluationAdapter() {
		if (cluster_EvaluationItemProvider == null) {
			cluster_EvaluationItemProvider = new Cluster_EvaluationItemProvider(this);
		}

		return cluster_EvaluationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.OPtics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OPticsItemProvider oPticsItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.OPtics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOPticsAdapter() {
		if (oPticsItemProvider == null) {
			oPticsItemProvider = new OPticsItemProvider(this);
		}

		return oPticsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Auto_Prep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Auto_PrepItemProvider auto_PrepItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Auto_Prep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuto_PrepAdapter() {
		if (auto_PrepItemProvider == null) {
			auto_PrepItemProvider = new Auto_PrepItemProvider(this);
		}

		return auto_PrepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Statistics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatisticsItemProvider statisticsItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Statistics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatisticsAdapter() {
		if (statisticsItemProvider == null) {
			statisticsItemProvider = new StatisticsItemProvider(this);
		}

		return statisticsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Visualization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisualizationItemProvider visualizationItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Visualization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisualizationAdapter() {
		if (visualizationItemProvider == null) {
			visualizationItemProvider = new VisualizationItemProvider(this);
		}

		return visualizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Correlation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CorrelationItemProvider correlationItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Correlation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCorrelationAdapter() {
		if (correlationItemProvider == null) {
			correlationItemProvider = new CorrelationItemProvider(this);
		}

		return correlationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Standard_Deviation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Standard_DeviationItemProvider standard_DeviationItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Standard_Deviation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandard_DeviationAdapter() {
		if (standard_DeviationItemProvider == null) {
			standard_DeviationItemProvider = new Standard_DeviationItemProvider(this);
		}

		return standard_DeviationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Bar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BarItemProvider barItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Bar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBarAdapter() {
		if (barItemProvider == null) {
			barItemProvider = new BarItemProvider(this);
		}

		return barItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mLmodel.Linear_Regression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Linear_RegressionItemProvider linear_RegressionItemProvider;

	/**
	 * This creates an adapter for a {@link mLmodel.Linear_Regression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinear_RegressionAdapter() {
		if (linear_RegressionItemProvider == null) {
			linear_RegressionItemProvider = new Linear_RegressionItemProvider(this);
		}

		return linear_RegressionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (rootItemProvider != null)
			rootItemProvider.dispose();
		if (processItemProvider != null)
			processItemProvider.dispose();
		if (csvItemProvider != null)
			csvItemProvider.dispose();
		if (sepItemProvider != null)
			sepItemProvider.dispose();
		if (nrowsItemProvider != null)
			nrowsItemProvider.dispose();
		if (idItemProvider != null)
			idItemProvider.dispose();
		if (targetItemProvider != null)
			targetItemProvider.dispose();
		if (regularItemProvider != null)
			regularItemProvider.dispose();
		if (excelItemProvider != null)
			excelItemProvider.dispose();
		if (header_ExItemProvider != null)
			header_ExItemProvider.dispose();
		if (simple_ImputerItemProvider != null)
			simple_ImputerItemProvider.dispose();
		if (missing_ValuesItemProvider != null)
			missing_ValuesItemProvider.dispose();
		if (strategyItemProvider != null)
			strategyItemProvider.dispose();
		if (fill_ValueItemProvider != null)
			fill_ValueItemProvider.dispose();
		if (knN_ImputerItemProvider != null)
			knN_ImputerItemProvider.dispose();
		if (n_NeighborsItemProvider != null)
			n_NeighborsItemProvider.dispose();
		if (metricItemProvider != null)
			metricItemProvider.dispose();
		if (weightsItemProvider != null)
			weightsItemProvider.dispose();
		if (knnItemProvider != null)
			knnItemProvider.dispose();
		if (cross_ValidationItemProvider != null)
			cross_ValidationItemProvider.dispose();
		if (headCSVItemProvider != null)
			headCSVItemProvider.dispose();
		if (sheet_Na_ExcelItemProvider != null)
			sheet_Na_ExcelItemProvider.dispose();
		if (robust_ScalingItemProvider != null)
			robust_ScalingItemProvider.dispose();
		if (standardizationItemProvider != null)
			standardizationItemProvider.dispose();
		if (normalizationItemProvider != null)
			normalizationItemProvider.dispose();
		if (oneHotItemProvider != null)
			oneHotItemProvider.dispose();
		if (dropItemProvider != null)
			dropItemProvider.dispose();
		if (categoriesItemProvider != null)
			categoriesItemProvider.dispose();
		if (sparseItemProvider != null)
			sparseItemProvider.dispose();
		if (handle_UnkItemProvider != null)
			handle_UnkItemProvider.dispose();
		if (duplicatesItemProvider != null)
			duplicatesItemProvider.dispose();
		if (keepItemProvider != null)
			keepItemProvider.dispose();
		if (date_to_IntItemProvider != null)
			date_to_IntItemProvider.dispose();
		if (yearItemProvider != null)
			yearItemProvider.dispose();
		if (monthItemProvider != null)
			monthItemProvider.dispose();
		if (dayItemProvider != null)
			dayItemProvider.dispose();
		if (pcaItemProvider != null)
			pcaItemProvider.dispose();
		if (componentItemProvider != null)
			componentItemProvider.dispose();
		if (varienceItemProvider != null)
			varienceItemProvider.dispose();
		if (svmItemProvider != null)
			svmItemProvider.dispose();
		if (mlpItemProvider != null)
			mlpItemProvider.dispose();
		if (hidden_Layer_SizesItemProvider != null)
			hidden_Layer_SizesItemProvider.dispose();
		if (voting_ClassifierItemProvider != null)
			voting_ClassifierItemProvider.dispose();
		if (random_ForestItemProvider != null)
			random_ForestItemProvider.dispose();
		if (k_MediansItemProvider != null)
			k_MediansItemProvider.dispose();
		if (k_MeansItemProvider != null)
			k_MeansItemProvider.dispose();
		if (logistic_RegressionItemProvider != null)
			logistic_RegressionItemProvider.dispose();
		if (n_Estimators_RFItemProvider != null)
			n_Estimators_RFItemProvider.dispose();
		if (criterion_RFItemProvider != null)
			criterion_RFItemProvider.dispose();
		if (random_State_RFItemProvider != null)
			random_State_RFItemProvider.dispose();
		if (dbscanItemProvider != null)
			dbscanItemProvider.dispose();
		if (max_Iter_MLPItemProvider != null)
			max_Iter_MLPItemProvider.dispose();
		if (random_State_MLPItemProvider != null)
			random_State_MLPItemProvider.dispose();
		if (activation_MLPItemProvider != null)
			activation_MLPItemProvider.dispose();
		if (alpha_MLPItemProvider != null)
			alpha_MLPItemProvider.dispose();
		if (scatterItemProvider != null)
			scatterItemProvider.dispose();
		if (cluster_EvaluationItemProvider != null)
			cluster_EvaluationItemProvider.dispose();
		if (oPticsItemProvider != null)
			oPticsItemProvider.dispose();
		if (auto_PrepItemProvider != null)
			auto_PrepItemProvider.dispose();
		if (statisticsItemProvider != null)
			statisticsItemProvider.dispose();
		if (visualizationItemProvider != null)
			visualizationItemProvider.dispose();
		if (correlationItemProvider != null)
			correlationItemProvider.dispose();
		if (standard_DeviationItemProvider != null)
			standard_DeviationItemProvider.dispose();
		if (barItemProvider != null)
			barItemProvider.dispose();
		if (linear_RegressionItemProvider != null)
			linear_RegressionItemProvider.dispose();
	}

}
